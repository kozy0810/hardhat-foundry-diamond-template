/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface Test1FacetInterface extends utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "test1Func1()": FunctionFragment;
    "test1Func10()": FunctionFragment;
    "test1Func2()": FunctionFragment;
    "test1Func3()": FunctionFragment;
    "test1Func4()": FunctionFragment;
    "test1Func5()": FunctionFragment;
    "test1Func6()": FunctionFragment;
    "test1Func7()": FunctionFragment;
    "test1Func8()": FunctionFragment;
    "test1Func9()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "supportsInterface"
      | "test1Func1"
      | "test1Func10"
      | "test1Func2"
      | "test1Func3"
      | "test1Func4"
      | "test1Func5"
      | "test1Func6"
      | "test1Func7"
      | "test1Func8"
      | "test1Func9"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func10",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func6",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func7",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func9",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test1Func1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test1Func10",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test1Func2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func7", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func9", data: BytesLike): Result;

  events: {
    "TestEvent(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TestEvent"): EventFragment;
}

export interface TestEventEventObject {
  something: string;
}
export type TestEventEvent = TypedEvent<[string], TestEventEventObject>;

export type TestEventEventFilter = TypedEventFilter<TestEventEvent>;

export interface Test1Facet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Test1FacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    supportsInterface(
      _interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    test1Func1(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func10(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func2(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func3(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func4(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func5(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func6(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func7(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func8(overrides?: CallOverrides): Promise<[BigNumber]>;

    test1Func9(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  supportsInterface(
    _interfaceID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  test1Func1(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func10(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func2(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func3(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func4(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func5(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func6(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func7(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func8(overrides?: CallOverrides): Promise<BigNumber>;

  test1Func9(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    supportsInterface(
      _interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    test1Func1(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func10(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func2(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func3(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func4(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func5(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func6(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func7(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func8(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func9(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TestEvent(address)"(something?: null): TestEventEventFilter;
    TestEvent(something?: null): TestEventEventFilter;
  };

  estimateGas: {
    supportsInterface(
      _interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test1Func1(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func10(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func2(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func3(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func4(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func5(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func6(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func7(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func8(overrides?: CallOverrides): Promise<BigNumber>;

    test1Func9(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      _interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    test1Func1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func10(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func6(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func7(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test1Func9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
