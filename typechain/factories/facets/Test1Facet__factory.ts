/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test1Facet, Test1FacetInterface } from "../../facets/Test1Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "something",
        type: "address",
      },
    ],
    name: "TestEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func10",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func3",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func4",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func5",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func6",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func7",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func8",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func9",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806371a99d6f11610081578063cd0bae091161005b578063cd0bae0914610132578063cf3bbe1814610139578063db32da151461014057600080fd5b806371a99d6f1461011d57806387952d2214610124578063cbb835f61461012b57600080fd5b806311046047116100b2578063110460471461010857806319e3b5331461010f57806324c1d5a71461011657600080fd5b806301ffc9a7146100ce5780630716c2ae146100f7575b600080fd5b6100e26100dc366004610147565b50600090565b60405190151581526020015b60405180910390f35b60025b6040519081526020016100ee565b60036100fa565b60016100fa565b60056100fa565b60076100fa565b600a6100fa565b60066100fa565b60096100fa565b60046100fa565b60086100fa565b60006020828403121561015957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461018957600080fd5b939250505056fea2646970667358221220b46dafb42ad3571e67bcd92f24d40e15c7ee8bf9d0a68943bb6fb6ce819e0cd464736f6c634300080d0033";

type Test1FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test1FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test1Facet__factory extends ContractFactory {
  constructor(...args: Test1FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test1Facet> {
    return super.deploy(overrides || {}) as Promise<Test1Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test1Facet {
    return super.attach(address) as Test1Facet;
  }
  override connect(signer: Signer): Test1Facet__factory {
    return super.connect(signer) as Test1Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test1FacetInterface {
    return new utils.Interface(_abi) as Test1FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test1Facet {
    return new Contract(address, _abi, signerOrProvider) as Test1Facet;
  }
}
